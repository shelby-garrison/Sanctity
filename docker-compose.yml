version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: comment_app_db
    environment:
      POSTGRES_DB: db_name
      POSTGRES_USER: postgres_username
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - comment_app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: postgres -c 'max_connections=100'

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: comment_app_backend
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres_username
      - DB_PASSWORD=postgres_password
      - DB_DATABASE=db_name
      - JWT_SECRET=secret-jwt
      - JWT_EXPIRES_IN=24h
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - comment_app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: comment_app_frontend
    environment:
      - VITE_API_URL=http://localhost:3001
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - comment_app_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  comment_app_network:
    driver: bridge 